local environ = {}

-- Declare environ
local ffi = require("ffi")
ffi.cdef([[
extern char **environ;
]])

local i = 0
repeat
    local env = ffi.string(ffi.C.environ[i])
    local name, value = env:match("([^=]+)=(.*)")
    environ[name] = value
    i = i + 1
until ffi.C.environ[i] == ffi.NULL

local function getUrlFromEnv(prefix, name)
    local port = environ[name .. '_port']
    if port then
        local url = environ[name .. '_PORT_' .. port .. '_TCP']
        if not url then
            error('Error: Explicitly set port ' .. port .. ' for ' .. prefix .. ', but not TCP port exposed')
        end
        return url
    end
    -- Check for preferred port definitions
    local PREFERRED_PORTS = { 80, 8080, 8000}
    for _, port in ipairs(PREFERRED_PORTS) do
        local best = environ[prefix .. '_PORT_' .. port .. '_TCP']
        if best then
            return best
        end
    end

    -- Use first available port definition
    local url = environ[prefix .. '_PORT']

    -- Still no URL found
    if not url and prefix ~= 'SCRIPT' then
        print('Skip ' .. prefix .. ' because it has no port defined')
    end
    return url
end

local servers = {}

local function processValue(key, value)
    local prefix = key:match("(.*)_NAME$")
    if not prefix then
        return
    end
    local name = value
    -- Get tail-end after any slashes
    name = name:match("/([^/]*)$") or name

    local url = getUrlFromEnv(prefix, name)
    if not url then
        return
    end
    local path = '/'

    url = url:gsub("tcp://", "http://") .. path
    servers[name] = url

    print('/' .. name .. ' => ' .. url)
end

for key, value in pairs(environ) do
    processValue(key, value)
end

if not next(servers) then
    error("No servers found")
end

local config = [[
# automatically generated by /apply-from-env.lua
server {
    listen 80;
    root /dev/null;

]]

local default = environ['default']
if default then
    config = config .. [[
    #redirect default name
    location / {
        return 301 ]] .. default .. [[;
    }
]]
end

for name, url in pairs(servers) do
    config = config .. [[
    # proxy for ]] .. name .. [[

    location /]] .. name .. [[/ {
        proxy_pass ]] .. url .. [[;

        # rewrite redirect / location headers to match this subdir
        proxy_redirect default;
        proxy_redirect / $scheme://$http_host/]] .. name .. [[/;

        proxy_set_header Host $http_host;
        proxy_set_header X-Forwarded-For $remote_addr;
    }

    location = /]] .. name .. [[ {
        return 301 $scheme://$http_host$uri/$is_args$args;
    }
]]
end

config = config .. [[
}
]]
local f = assert(io.open("/etc/nginx/site.conf", "w"))
assert(f:write(config))
f:close()
